generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model company {
  id                    Int                     @id @default(autoincrement())
  name                  String
  info                  String
  interview_preparation interview_preparation[]
}

model interview {
  id                    String                 @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id               String                 @map("user") @db.Uuid
  date                  DateTime               @db.Timestamptz(6)
  job_link              String
  user                  user                   @relation("interview_userTouser", fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  interview_analysis    interview_analysis?    @relation("interview_analysis_interviewTointerview")
  interview_preparation interview_preparation? @relation("interview_preparation_interviewTointerview")
}

model interview_analysis {
  interview_id String    @id @map("interview") @db.Uuid
  file_name    String
  file_type    file_type
  analysis     String
  interview    interview @relation("interview_analysis_interviewTointerview", fields: [interview_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model interview_preparation {
  interview_id   String    @id @map("interview") @db.Uuid
  company_id     Int
  job_info       String
  material_links String[]
  company        company   @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  interview      interview @relation("interview_preparation_interviewTointerview", fields: [interview_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model resume {
  user_id     String  @id @map("user") @db.Uuid
  file        String
  analysis    String?
  spell_check String?
  user        user    @relation("resume_userTouser", fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model skill {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  is_deleted  Boolean      @default(false)
  user_skills user_skill[] @relation("user_skill_skillToskill")
}

model user {
  id             String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email          String           @unique
  name           String
  refresh_tokens String[]
  interviews     interview[]      @relation("interview_userTouser")
  resume         resume?          @relation("resume_userTouser")
  user_career    user_career[]    @relation("user_career_userTouser")
  user_education user_education[] @relation("user_education_userTouser")
  user_skills    user_skill[]     @relation("user_skill_userTouser")
}

model user_career {
  id        Int     @id @default(autoincrement())
  user_id   String  @map("user") @db.Uuid
  company   String?
  job_title String?
  years     Int
  user      user    @relation("user_career_userTouser", fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user_education {
  id        Int    @id @default(autoincrement())
  user_id   String @map("user") @db.Uuid
  institute String
  years     Int
  user      user   @relation("user_education_userTouser", fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user_skill {
  user_id  String @map("user") @db.Uuid
  skill_id Int    @map("skill")
  skill    skill  @relation("user_skill_skillToskill", fields: [skill_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user     user   @relation("user_skill_userTouser", fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([user_id, skill_id])
}

enum file_type {
  audio
  text
}
